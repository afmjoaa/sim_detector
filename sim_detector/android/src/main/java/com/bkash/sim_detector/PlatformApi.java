// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.bkash.sim_detector;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PlatformApi {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SubscribedSimInformation {
    private Long simSlotZeroSubscriptionId;
    public Long getSimSlotZeroSubscriptionId() { return simSlotZeroSubscriptionId; }
    public void setSimSlotZeroSubscriptionId(Long setterArg) { this.simSlotZeroSubscriptionId = setterArg; }

    private Long simSlotOneSubscriptionId;
    public Long getSimSlotOneSubscriptionId() { return simSlotOneSubscriptionId; }
    public void setSimSlotOneSubscriptionId(Long setterArg) { this.simSlotOneSubscriptionId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("simSlotZeroSubscriptionId", simSlotZeroSubscriptionId);
      toMapResult.put("simSlotOneSubscriptionId", simSlotOneSubscriptionId);
      return toMapResult;
    }
    static SubscribedSimInformation fromMap(Map<String, Object> map) {
      SubscribedSimInformation fromMapResult = new SubscribedSimInformation();
      Object simSlotZeroSubscriptionId = map.get("simSlotZeroSubscriptionId");
      fromMapResult.simSlotZeroSubscriptionId = (simSlotZeroSubscriptionId == null) ? null : ((simSlotZeroSubscriptionId instanceof Integer) ? (Integer)simSlotZeroSubscriptionId : (Long)simSlotZeroSubscriptionId);
      Object simSlotOneSubscriptionId = map.get("simSlotOneSubscriptionId");
      fromMapResult.simSlotOneSubscriptionId = (simSlotOneSubscriptionId == null) ? null : ((simSlotOneSubscriptionId instanceof Integer) ? (Integer)simSlotOneSubscriptionId : (Long)simSlotOneSubscriptionId);
      return fromMapResult;
    }
  }
  private static class PlatformListenerApiCodec extends StandardMessageCodec {
    public static final PlatformListenerApiCodec INSTANCE = new PlatformListenerApiCodec();
    private PlatformListenerApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return SubscribedSimInformation.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof SubscribedSimInformation) {
        stream.write(128);
        writeValue(stream, ((SubscribedSimInformation) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class PlatformListenerApi {
    private final BinaryMessenger binaryMessenger;
    public PlatformListenerApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return PlatformListenerApiCodec.INSTANCE;
    }

    public void emitSimInformation(SubscribedSimInformation subscribedSimInformationArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PlatformListenerApi.emitSimInformation", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(subscribedSimInformationArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
